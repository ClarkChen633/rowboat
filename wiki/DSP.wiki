#summary This page contains all information regarding OMAP3530 or DM3730 DSP stack integration in Android
<wiki:toc max_depth="4" />
= Introduction =

The OMAP3530 or DM3730 (as well the !DaVinci (DM) family of processors) has a C46x+ DSP core embedded in the SoC. This DSP core can be used for various purposes, including multimedia decoding/encoding.  This offloads the host ARM processor for other general processing tasks and enables decoding of higher bitrate and/or higher resolution video and audio than would otherwise be achievable with Android running on ARM only.

[http://code.google.com/p/rowboat/ Rowboat] DSP support is based on the TI Linux Digital Video Software Development Kit ([http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/ DVSDK]) for the OMAP3530/DM3730.

= Software Stack Components =

The following components form a complete software stack needed to work efficiently with DSP. They are provided in TI DVSDK or individual packages.

 # *DSP/BIOS* (and tools)
    * A TI provided realtime operating system for DSP's
 # *Codec Engine* (and tools)
    * A TI provided framework to enable instantiation/control of Codecs running on DSP from the ARM
 # *DSP/BIOS Link*
    * TI provided driver provided low-level communications between the ARM and the DSP
 # *dmai*
 # *opencore dmai codecs*
 # *additional DSP codecs* (optional), for example, mp3 DSP codec

= List of modifications made on top of DSP stack =
 # Added SYS V IPC into bionic
 # Some 'libpthread' calls are not yet implemented in android (at the moment calls to these API's are disabled in the components that use them):
   * pthread_sigmask
   * pthread_mutexattr_settype
   * pthread_setcanceltype
   * pthread_attr_setinheritsched
 # Modified build files (Makefiles and config.bld) to adapt for Android toolchains
 # Memory holes kernel patches (TBD)

= Building and Testing DSP stack =

== Preparation ==

 # Check if you have _git_, _java5-jdk_, and _expect_ utilities installed on your build host. Use the 'which' command from the Linux prompt to see if they commands are present (i.e. which git)
 # Download _repo_. You can find detailed repo installing instructions [http://source.android.com/source/git-repo.html here]. Make sure ~/bin is in $PATH
{{{
# curl http://android.git.kernel.org/repo >~/bin/repo
# chmod a+x ~/bin/repo
}}}

 # Download rowboat Android (Eclair version) with integrated TI DSP stack and TI's Android SGX SDK package from gitorious.org/rowboat:
    {{{ 
# mkdir ~/rowboat-android
# cd ~/rowboat-android
# repo init -u git://gitorious.org/rowboat/manifest.git -m rowboat-eclair-dsp.xml
# repo sync
# git clone git://gitorious.org/rowboat/ti_android_sgx_sdk.git
    }}}
 # Download [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/ce/2_25_05_16/exports/codec_engine_2_25_05_16.tar.gz codec_engine_2_25_05_16.tar.gz] and place it under the _external/ti-dsp_ folder.
    {{{
# wget http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/ce/2_25_05_16/exports/codec_engine_2_25_05_16.tar.gz
    }}}
 # (*Optional*) DVSDK packages will be downloaded automatically during the build process, unless you want to use local files (previously downloaded instead in order to save time on downloads. You can put the following pre-downloaded packages under the _external/ti-dsp_ folder.
      * [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/exports/dvsdk_3_01_00_10_Setup.bin dvsdk_setuplinux_3_01_00_10.bin]
      * [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/exports/cs1omap3530_setupLinux_1_01_00-prebuilt-dvsdk3.01.00.10.bin cs1omap3530_setupLinux_1_01_00-prebuilt-dvsdk3.01.00.10.bin]
      * [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/exports/ti_cgt_c6000_6.1.12_setup_linux_x86.bin ti_cgt_c6000_6.1.12_setup_linux_x86.bin]
      * [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/ce/2_25_05_16/exports/codec_engine_2_25_05_16.tar.gz codec_engine_2_25_05_16.tar.gz]

== MP3 DSP codec (Optional) ==

By default Codec Server doesn't support DSP MP3 decoding, you need to install additional codec (c64xplus_mp3dec_1_31_001_production.bin) to enable it. All the instructions are available on the TI wiki page [http://processors.wiki.ti.com/index.php/How_do_I_Integrate_new_codecs_into_DVSDK How do I integrate new codecs into DVSDK]. <br/> *Note:* It requires registration to download the package.

== Build ==

Add Android toolchain in $PATH:
    {{{
# export PATH=${HOME}/rowboat-android/prebuilt/linux-x86/toolchain/arm-eabi-4.4.0/bin:$PATH
    }}}
If English is not the locale in your host machine, some package install scripts will fail due to unexpected non-English output. Set env _LANG_ as following to fix it:
    {{{
# export LANG=C 
    }}}
To build Android with TI DSP stack use following command:
   {{{
# make TARGET_PRODUCT=[omap3evm | beagleboard | igepv2] dvsdk
   }}}

It builds Android and Linux kernel for the selected platform, TI kernel modules for DSP communication and codec server. 

After build is finished successfully TI DSP specific kernel modules and codec server are located under the _/system/ti-dsp_ folder in the rootfs.

Prepare rootfs, assuming TARGET_PRODUCT=omap3evm in the command above:
    {{{
# cd out/target/product/omap3evm
# mkdir android_rootfs
# cp -r root/* android_rootfs
# cp -r system android_rootfs
    }}}

Follow the instructions in [http://code.google.com/p/rowboat/wiki/ConfigureAndBuild#Install_the_Android_Graphics_SGX_SDK_on_Host_Machine ConfigureAndBuild#Install_the_Android_Graphics_SGX_SDK_on_Host_Machine] to integrate SGX SDK libraries and drivers into the rootfs. This step is necessary to get 2D GUI accelerated.

For boards using OMAP3530, use {{{ OMAPES=3.x }}} install option, for boards using DM3730, use {{{ OMAPES=5.x }}} install option.

Create the rootfs image:
    {{{
# cd out/target/product/omap3evm
# sudo ../../../../build/tools/mktarball.sh ../../../host/linux-x86/bin/fs_get_stats android_rootfs . rootfs rootfs.tar.bz2
    }}}

Follow the instructions in [http://code.google.com/p/rowboat/wiki/ConfigureAndBuild#Prepare_SD_card ConfigureAndBuild#Prepare_SD_card] to populate the rootfs to a SD card. Before copying _uImage_ to the SD card, copy [http://code.google.com/p/rowboat/downloads/detail?name=x-load.bin.ift&can=2&q= x-load.bin.ift] to the SD card first partition, rename it to _mlo_; also copy [http://code.google.com/p/rowboat/downloads/detail?name=u-boot.evm.bin&can=2&q= u-boot.evm.bin] or [http://code.google.com/p/rowboat/downloads/detail?name=u-boot.beagle.bin&can=2&q= u-boot.beagle.bin] depending on your platform, rename it to _u-boot.bin_. _mlo_ has to be copied first, otherwise the board will not boot.

== Boot ==

Refer to the instructions in [http://code.google.com/p/rowboat/wiki/ConfigureAndBuild#Configure_target_board ConfigureAndBuild#Configure_target_board] to setup the u-boot env on the target board.

DVSDK DSP stack by default uses physical memory window within 89-128MB. In order not to change DSP stack mappings we recommend to use following memory settings:
  * For boards with > 128MB of memory (say Beagle C3, or OMAP3EVM Gen. II), use "memory hole" parameters, for example adding: {{{ mem=88M@0x80000000 mem=128M@0x88000000 }}} to the bootargs tells kernel to take first 88M of phys memory and 128M with 128M offset, so the DSP memory window will not be managed by the kernel.(Don't forget to adjust these parameters for your board)

  * For boards with 128MB of memory, add {{{ mem=88M }}} to your bootargs (rest will be used for DSP). With 128MB board you'll probably have buffer allocating problem with the omap_vout driver. To avoid this, try following bootargs additions for the display driver: {{{ omap_vout.vid1_static_vrfb_alloc=y omap_vout.video1_numbuffers=3 omap_vout.video1_bufsize=829440 omap_vout.video2_numbuffers=0 }}}. Anyway we recommend to use new 256M boards.

The example of u-boot env setup for omap3evm with 256MB DDR to boot from SD card:
{{{
OMAP3_EVM# setenv bootcmd 'mmc init; fatload mmc 0 80800000 uImage; bootm 80800000'
OMAP3_EVM# setenv bootargs 'mem=88M@0x80000000 mem=128M@0x88000000 console=tty0 console=ttyS0,115200n8 androidboot.console=ttyS0 root=/dev/mmcblk0p2 rw init=/init rootwait'
OMAP3_EVM# saveenv
}}}

== Test ==

To test media playback use 'Music player' or 'Gallery' UI applications in rowboat. Supported formats are available on [http://code.google.com/p/rowboat/wiki/DSPCodecs#Supported_decoding_formats OMX DSP-accelerated audio/video codecs] wiki page.
Check for 'omx-dsp' tag in logcat to see that accelerated codecs are enabled.

If you have any video clip which should be supported but cannot play on rowboat, please try to extract the video elementary stream and play it with the DVSDK decode demo.

= Known Issues =
 * system hangs when playback video clips using both DSP AAC + DSP Video codecs together;
 * dragging the playback progress bar causes a/v out of sync;
 * frame drops when playback D1 resolution mpeg4 video clips (_unconfirmed_);

Using ARM AAC codec can workaround the 'system hangs' issue. Revert back to commit 2bec6d48... - 'Add OMX DSP aac codec support' in {{{ external/opencore }}} to use ARM AAC codec. The files touched under {{{ external/opencore }}} are,
 `build_config/opencore_dynamic/pv_config.h` <br/>
 `codecs_v2/omx/omx_common/src/pv_omxcore.cpp` <br/>
 `codecs_v2/omx/omx_common/src/pv_omxregistry.cpp` <br/>
 `nodes/pvaacffparsernode/include/pvmf_aacffparser_defs.h`


= misc notes (draft) =

One more update:

During downloading DVSDK svn may ask you something like "do you want to save this settings"(it happens after kernel build).
You should confirm it (save permanently) so it will work quietly later.

_Some updates:_
 * Now kernel will be reconfigured with the default config only if there is no kernel/.config file so: 
  # If you didn't build kernel before it will be configured with the default config and built.
  # It will rebuild kernel using your config if .config is in place (will take a few seconds if you didn't changed it).
 * DVSDK cleaning is now calling only after downloading/installing it to clean up prebuilt stuff.