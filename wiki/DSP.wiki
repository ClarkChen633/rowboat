#summary This pages contains all information regarding Omap3530 DSP stack integration in Android

= Introduction =

OMAP3530 (as well as family of DaVinci DM) has C46x+ DSP core embedded in the SoC. DSP core can be used for various purposes, multimedia decoding/encoding is one of good examples.

[http://code.google.com/p/rowboat/ Rowboat] DSP support is based on TI Linux Digital Video Software Development Kit ([http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/ DVSDK]) for OMAP3530

= Software Stack Components =

Following components compound complete software stack needed to work efficiently with DSP:

(TBD briefly describe what each component does and provide reference to all useful information)

 # *bios* (and tools)
 # *codec engine* (and tools)
 # *dsplink*
 # *dmai*
 # *opencore dmai codecs* (coming soon)
 # *ti gstreamer* (optional)

= Components/packages versions and locations =

 # [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest//exports/dvsdk_setuplinux_3_00_02_44.bin DVSDK_3_00 3_00_02_44] containing:
    # biosutils_1_01_00
    # ceutils_1.06
    # dmai_2_00_01_04
    # dsplink_1_61_03
    # local_power_manager_1_24
    # xdais_6_24
 # [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest//exports/cs1omap3530_setuplinux_1_00_01-44.bin cs1omap3530_1_00_01]
 # [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/exports/TI-C6x-CGT-v6.0.16.1.bin cg6x_6.0.16.1]
 # [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/exports/bios_setuplinux_5_33_06.bin bios_5_33_06]
 # [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest//exports/xdctools_setuplinux_3_15_01_59.bin xdctools_3_15_01_59]
 # [http://software-dl.ti.com/dsps/dsps_registered_sw/sdo_sb/targetcontent/CE/ce_2_24/index.html codec_engine_2_24_01] *Note:* You need to have an account on TI site (free registration)
 # [https://gstreamer.ti.com/gf/project/gstreamer_ti/frs/?action=FrsReleaseView&release_id=211 TIGStreamerPlugin 1.01.00] *Note:* Suggest to get gstreamer from the project SVN: 
    {{{ 
    # svn checkout --username anonymous https://gstreamer.ti.com/svn/gstreamer_ti/trunk/gstreamer_ti 
    }}}

= List of modifications made on top of DSP stack =
 # Added SYS V IPC into bionic
 # Some 'libpthread' calls are not yet implemented in android (this moment they are commented out):
   * pthread_sigmask
   * pthread_mutexattr_settype
   * pthread_setcanceltype
   * pthread_attr_setinheritsched
 # Modified build files (Makefiles and config.bld) to adapt for Android toolchains
 # Memory holes kernel patches (TBD)
 # Patches for gstreamer in android

*NOTE:* Opencore/Openmax DMAI codecs support coming (TIGSTreamerPlugin will be just a secondary option then)

= Building and Testing DSP stack =

== Preparation ==

 # Check if you have expect installed on your build host (TBD explain why it is needed)
 # Download rowboat Android with integrated TI DSP stack from gitorious.org/rowboat:
    {{{ 
    # repo init -u git://gitorious.org/rowboat/manifest.git -m ti-dsp.xml repo sync
    }}}
 # Download and place codec_engine_2_24_01.tar.gz under the external/ti-dsp folder. Codec Engine is available here: [http://software-dl.ti.com/dsps/dsps_registered_sw/sdo_sb/targetcontent/CE/ce_2_24/index.html] *Note:* You may need to have an account on software-dl.ti.com
 # (Optional) Rest of the components (DVSDK and TIGStreamerPlugins) will be downloaded automatically during the build process, unless you want to use local files (previously downloaded instead in order to save time on downloads.
   * You can put pre-downloaded [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/ DVSDK] under the external/ti-dsp folder. Full list of necessary files looks as follows:
      * dvsdk_setuplinux_3_00_02_44.bin
      * cs1omap3530_setuplinux_1_00_01-44.bin
      * xdctools_setuplinux_3_15_01_59.bin
      * bios_setuplinux_5_33_06.bin
      * TI-C6x-CGT-v6.0.16.1.bin
   * TIGStreamerPlugins need to be placed under the external/ti-dsp folder (assume revision 506 is taken from [https://gstreamer.ti.com/svn/gstreamer_ti/trunk/gstreamer_ti gstreamer-ti svn]). To check out it manually:
   {{{
   # svn checkout -r 506 --username anonymous --password "" -q https://gstreamer.ti.com/svn/gstreamer_ti/trunk/gstreamer_ti
   }}}

== Build ==

To build Android with TI DSP stack use following command:
   {{{ 
   # make TARGET_PRODUCT=[omap3evm | beagleboard] BUILD_WITH_GST=true dvsdk
   }}}

It builds Android and Linux kernel for the selected platform, TI kernel modules for DSP communication and codec server.
        
After build is finished successfully TI DSP specific kernel modules and codec server are located under the /system/ti-dsp folder in the rootfs, TIGSTreamer plugin is located under the /system/plugins folder in the rootfs.

== Test ==

Now you can try playback of media using gstreamer command-line programs, for example:
    {{{ 
    # gst-launch-0.10 -v filesrc location=sample.264 ! TIViddec2 codecName=h264dec engineName=codecServer ! TIDmaiVideoSink videoStd=VGA videoOutput=LCD sync=false
    }}}

You can experiment with pipe parameters using following information: [http://wiki.davincidsp.com/index.php/Example_GStreamer_Pipelines] *Note:* don't forget to change gst-launch to gst-launch-0.10 (there is no symlink installed by default). No need to exports of misc paths, Loadmodules.sh is also not needed

= misc notes (draft) =

One more update:

During downloading DVSDK svn may ask you something like "do you want to save this settings"(it happens after kernel build).
You should confirm it (save permanently) so it will work quietly later.

Some updates:
2) Now kernel will be reconfigured with the default config only if there is no kernel/.config file so:
	a) If you didn't build kernel before it will be configured with the default config and built.
	b) It will rebuild kernel using your config if .config is in place (will take a few seconds if you didn't changed it).
3) DVSDK cleaning is now calling only after downloading/installing it to clean up prebuilt stuff.