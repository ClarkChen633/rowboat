#summary This page contains information about enabling hardware acceleration for multimedia features of Android thorugh OpenCore on OMAP3530 and DM3730.

<wiki:toc max_depth="4" />
= Benefits =

The OMAP3530 or DM3730 has a powerful C64x+ DSP core embedded in the SoC. This DSP core can be used for various purposes, including multimedia decoding/encoding.  This offloads the host ARM processor for other general processing tasks and enables decoding of higher bitrate and/or higher resolution video and audio than would otherwise be achievable with Android running on ARM only.

[http://code.google.com/p/rowboat/ Rowboat] DSP support is based on the TI Linux Digital Video Software Development Kit ([http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/ DVSDK]) for the OMAP3530/DM3730.

= Software Stack Components =

The following components form a complete software stack needed to work efficiently with DSP. They are provided together as the TI DVSDK or they can be downoaded as individual packages directly from TI.

 # *DSP/BIOS* (and tools)
    * A TI provided realtime operating system for DSP's
    * [http://processors.wiki.ti.com/index.php?title=Category:DSPBIOS DSP/BIOS information on TI E2E]
    * [http://en.wikipedia.org/wiki/SYS/BIOS Wikipedia Overview of DSP/BIOS]
 # *Codec Engine* (and tools)
    * A TI provided framework to enable instantiation/control of Codecs running on DSP from the ARM
    * [http://processors.wiki.ti.com/index.php/Category:Codec_Engine]
 # *DSP/BIOS Link*
    * TI provided driver provided low-level communications between the ARM and the DSP
    * [http://focus.ti.com/docs/training/catalog/events/event.jhtml?sku=WEB108007 DSP/BIOS Link Training Material]
 # *DMAI*
    * The !DaVinci Multimedia Application Interface (DMAI) is a thin utility layer on top of the operating system (Linux or DSP/BIOS) and the Codec Engine (CE) to assist in quickly writing portable applications on a !DaVinci (or OMAP) platform.
    * [http://processors.wiki.ti.com/index.php/Davinci_Multimedia_Application_Interface]
 # *!OpenCore DMAI Codecs*
    * Integration of TI DSP accelerated codecs into the !PacketVideo !OpenCore framework that is provided here on the rowboat Android development site.
    * Technical Details available [http://code.google.com/p/rowboat/wiki/DSPCodecs here]
 # *additional DSP codecs* (optional), for example, mp3 DSP codec

= Building and Testing DSP stack =

== Preparation ==

 # Check if you have _git_, _java5-jdk_, and _expect_ utilities installed on your build host. Use the _which_ command from the Linux prompt to see if they commands are present (i.e. which git)
 # Download _repo_. You can find detailed repo installing instructions [http://source.android.com/source/git-repo.html here]. Make sure ~/bin is in $PATH
{{{
# mkdir -p ~/bin
# curl http://android.git.kernel.org/repo >~/bin/repo
# chmod a+x ~/bin/repo
}}}

 # Download rowboat Android (Eclair version) with integrated TI DSP stack from gitorious.org/rowboat. Please ensure you have atleast 13GB free space on your hard drive for the source and build temporary files.
    {{{ 
# mkdir ~/rowboat-android
# cd ~/rowboat-android
# repo init -u git://gitorious.org/rowboat/manifest.git -m rowboat-eclair-dsp.xml
# repo sync
    }}}
 # Download [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/ce/2_25_05_16/exports/codec_engine_2_25_05_16.tar.gz codec_engine_2_25_05_16.tar.gz] and place it under the _external/ti-dsp_ folder.
    {{{
# wget http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/ce/2_25_05_16/exports/codec_engine_2_25_05_16.tar.gz
    }}}
 # (*Optional*) DVSDK packages will be downloaded automatically during the build process, unless you want to use local files (previously downloaded instead in order to save time on downloads. You can put the following pre-downloaded packages under the _external/ti-dsp_ folder.
      * [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/exports/dvsdk_3_01_00_10_Setup.bin dvsdk_setuplinux_3_01_00_10.bin]
      * [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/exports/cs1omap3530_setupLinux_1_01_00-prebuilt-dvsdk3.01.00.10.bin cs1omap3530_setupLinux_1_01_00-prebuilt-dvsdk3.01.00.10.bin]
      * [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_sb/targetcontent/dvsdk/DVSDK_3_00/latest/exports/ti_cgt_c6000_6.1.12_setup_linux_x86.bin ti_cgt_c6000_6.1.12_setup_linux_x86.bin]

== MP3 DSP codec (Optional) ==

By default Codec Server doesn't support DSP MP3 decoding, you need to install additional codec (c64xplus_mp3dec_1_31_001_production.bin) to enable it. All the instructions are available on the TI wiki page [http://processors.wiki.ti.com/index.php/How_do_I_Integrate_new_codecs_into_DVSDK How do I integrate new codecs into DVSDK]. <br/> *Note:* It requires registration to download the package.

== Build ==

Add Android toolchain in $PATH:
    {{{
# export PATH=${HOME}/rowboat-android/prebuilt/linux-x86/toolchain/arm-eabi-4.4.0/bin:$PATH
    }}}
If English is not the locale in your host machine, some package install scripts will fail due to unexpected non-English output. Set env _LANG_ as following to fix it:
    {{{
# export LANG=C 
    }}}
To build Android with TI DSP stack use following command:
   {{{
# cd ~/rowboat-android
# make TARGET_PRODUCT=[omap3evm | beagleboard | igepv2] [OMAPES=(2.x|3.x|5.x)]
   }}}

It builds Android and Linux kernel for the selected platform, TI kernel modules for DSP communication and codec server, and SGX drivers as while. 

Your must specify your board with *TARGET_PRODUCT* variable. Set *OMAPES* variable to install proper version of SGX drivers (Default is 3.x): 
{{{
OMAPES=2.x, for OMAP3530 ES1 or ES2;
OMAPES=3.x, for OMAP3530 ES3.0;
OMAPES=5.x, for DM37x
}}}

After build is finished successfully TI DSP specific kernel modules and codec server are located under the _/system/ti-dsp_ folder in the rootfs. The kernel uImage is in _kernel/arch/arm/boot/_ folder. 

Create the rootfs image, assuming TARGET_PRODUCT=omap3evm in the command above:
    {{{
# cd out/target/product/omap3evm
# mkdir android_rootfs
# cp -r root/* system android_rootfs
# sudo ../../../../build/tools/mktarball.sh ../../../host/linux-x86/bin/fs_get_stats android_rootfs . rootfs rootfs.tar.bz2
    }}}

Download the [http://software-dl.ti.com/dsps/dsps_public_sw/sdo_tii/TI_Android_DevKit/01_00_00/exports/Prebuilt_Images.tar.gz Prebuilt Image Package] and untar it to get _MLO_ and _u-boot_ images.
{{{
# wget http://software-dl.ti.com/dsps/dsps_public_sw/sdo_tii/TI_Android_DevKit/01_00_00/exports/Prebuilt_Images.tar.gz
# tar zxf Prebuilt_Images.tar.gz
}}}

Locate the x-loader and u-boot images for your platform. For OMAP3530 and DM3730, they are _!Prebuilt_Images/OMAP35x_AM37x_EVM/MLO_ and _!Prebuilt_Images/OMAP35x_AM37x_EVM/u-boot.bin_.

Follow the instructions in [http://code.google.com/p/rowboat/wiki/ConfigureAndBuild#Prepare_SD_card ConfigureAndBuild#Prepare_SD_card] to populate the rootfs to a SD card. Before copying _uImage_ to the SD card, first copy _MLO_ to the SD card first partition; also copy _u-boot.bin_ into the same partition. _MLO_ has to be copied first, otherwise the board will not boot.

[http://processors.wiki.ti.com/index.php/How_to_Make_3_Partition_SD_Card How to Make 3 Partition SD Card] wiki is an alternative reference to populate rowboat to a SD card.

== Boot ==

DVSDK DSP stack by default uses physical memory window within 89-128MB. In order not to change DSP stack mappings we recommend to use following memory settings:
  * For boards with > 128MB of memory (say Beagle C3, or OMAP3EVM Gen. II), use "memory hole" parameters, for example adding: {{{ mem=88M@0x80000000 mem=128M@0x88000000 }}} to the _bootargs_ tells kernel to take first 88M of phys memory and 128M with 128M offset, so the DSP memory window will not be managed by the kernel.(Don't forget to adjust these parameters for your board)

  * For boards with 128MB of memory, add {{{ mem=88M }}} to your bootargs (rest will be used for DSP).

You'll probably have kernel crash issue due to v4l2 buffer allocation failure with the omap_vout driver in some cases. To avoid this, try following _bootargs_ additions: {{{ omap_vout.vid1_static_vrfb_alloc=y omap_vout.video1_numbuffers=3 omap_vout.video1_bufsize=614400 omap_vout.video2_numbuffers=0 }}}, in which the bufsize is display width `*` height `*` bytes_per_pixel.

The following is an example of u-boot env setup for omap3evm with 256MB DDR to boot from SD card. (It includes artificial line breaks to maintain a print-friendly document.)
{{{
OMAP3_EVM# setenv bootcmd 'mmc init; fatload mmc 0 80800000 uImage; bootm 80800000'
OMAP3_EVM# setenv bootargs 'mem=88M@0x80000000 mem=128M@0x88000000 console=tty0 
console=ttyS0,115200n8 androidboot.console=ttyS0 root=/dev/mmcblk0p2 rw init=/init rootwait
omap_vout.vid1_static_vrfb_alloc=y omap_vout.video1_numbuffers=3 omap_vout.video1_bufsize=614400 
omap_vout.video2_numbuffers=0'
OMAP3_EVM# saveenv
}}}

To configure the display to the DVI port append the following options to _bootargs_ above.
{{{
omapdss.def_disp=dvi omapfb.mode=dvi:720x480MR-24
}}}

For more details of display mode see [http://www.mjmwired.net/kernel/Documentation/fb/modedb.txt modedb Documentation].

== Test ==

To test media playback copy media files to the first partition of the SD card and use 'Music player' or 'Gallery' UI applications in rowboat. Supported formats are available on [http://code.google.com/p/rowboat/wiki/DSPCodecs#Supported_decoding_formats OMX DSP-accelerated audio/video codecs] wiki page.
Check for 'omx-dsp' tag in logcat to see that accelerated codecs are enabled.

If you have any video clip which should be supported but cannot play on rowboat, please try to extract the video elementary stream and play it with the DVSDK decode demo.

The _top_ command shows the ARM load is about 10~20% when playing H.264 or MPEG4 video clips in D1 resolution with AAC codec running on ARM side.

= Known Issues =
 * system hangs when playback video clips using both DSP AAC + DSP Video codecs together;
 * dragging the playback progress bar causes a/v out of sync;
 * frame drops when playback D1 resolution mpeg4 video clips (_unconfirmed_);

Using ARM audio codec can workaround the 'system hangs' issue. Undo the commit ID 2bec6d48...(Add OMX DSP aac codec support) and f17b027a...(Add MP3 DSP codec registry information) in {{{ external/opencore }}} to use ARM audio codec. The files touched under {{{ external/opencore }}} are,
 `build_config/opencore_dynamic/pv_config.h` <br/>
 `codecs_v2/omx/omx_common/src/pv_omxcore.cpp` <br/>
 `codecs_v2/omx/omx_common/src/pv_omxregistry.cpp` <br/>
 `nodes/pvaacffparsernode/include/pvmf_aacffparser_defs.h`


= Some Observations =

 * During downloading DVSDK svn may ask you something like "do you want to save this settings"(it happens after kernel build).  You should confirm it (save permanently) so it will work without prompting again later.
 * Now kernel will be reconfigured with the default config only if there is no kernel/.config file so: 
  # If you didn't build kernel before it will be configured with the default config and built.
  # It will rebuild kernel using your config if .config is in place (will take a few seconds if you didn't changed it).
 * DVSDK cleaning is now called only after downloading/installing it to clean up prebuilt stuff.
 * Sometimes Jave VM complains about SIGSEGV during compiling rowboat. Please re-run the make command if it happens.
 * If there is any failure while compiling dvsdk packages, and you want to redo a clean dvsdk build, please delete *external/ti-dsp/already_clean* and *external/ti-dsp/dvsdk_3_01_00_10/* and re-run the build command. If *external/ti-dsp/already_clean* exists, the build script will not install and patch dvsdk packages. Please refer to the top level Makefile for details.


=DVSDK/Android Integration Change Log=
 # Added SYS V IPC into bionic
 # Some 'libpthread' calls are not yet implemented in android (at the moment calls to these API's are disabled in the components that use them):
   * pthread_sigmask
   * pthread_mutexattr_settype
   * pthread_setcanceltype
   * pthread_attr_setinheritsched
 # Modified build files (Makefiles and config.bld) to adapt for Android toolchains
 # Memory holes kernel patches to enable support for memory sizes >128MBytes