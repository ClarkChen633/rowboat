#summary Configure and Build

== Prepare your host environment ==
=== Hardware ===
To work with Beagleboard or OMAP3EVM you will need the following:
 * Board
 * Host machine (Linux Ubuntu 8.x/9.x) with Ethernet card and serial port
 * Serial cable (null-modem)
 * Power supply (5V)
 * USB Hub
 * USB Ethernet adapter (for Beagleboard)
 * USB Keyboard & Mouse
 * Ethernet cross cable or Ethernet Switch/Hub+2 cables
 * Card Reader
 * 2Gb SD or MMC Card
 * 4:3 or 16:9 capable Display with DVI input
 * HDMI to DVI cable (for BeagleBoard)
 * DVI to DVI (if you want to use external Display on OMAP3EVM)
 
=== Software ===
As Google we recommend to use Ubuntu, but also you can use Fedora, CentOS.
 * Install DHCP server
 * Install tftp server (actual for OMAP3EVM)
 * Install [http://source.android.com/download/using-repo repo] tool 
 * Set up your Linux development environment, make sure you have the following:
Required packages:

{{{
Git 1.5.4 or newer and the GNU Privacy Guard. 
JDK 5.0, update 12 or higher.  Java 6 is not supported, because of incompatibilities with @Override.
flex, bison, gperf, libsdl-dev, libesd0-dev, libwxgtk2.6-dev (optional), build-essential, zip, curl, minicom, tftp-server
}}}
For Ubuntu 32-bit use such command:
{{{
$ sudo apt-get install git-core gnupg sun-java5-jdk flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl libncurses5-dev zlib1g-dev minicom tftpd
}}}
Ubuntu Intrepid (8.10) users may need a newer version of libreadline:
{{{
$ sudo apt-get install lib32readline5-dev
}}}

== Configure your network ==
 * Configure your host Ethernet adapter
{{{
sudo ifconfig ethX 10.10.10.1 netmask 255.255.255.0 up
}}}
 * Configure DHCP server for target's network
{{{
; Example dhcpd.conf
default-lease-time 600;
max-lease-time 7200;
subnet 10.10.10.0 netmask 255.255.255.0 {
  range 10.10.10.2 10.10.10.10;

host beagleboard_rev_c3 {
  hardware ethernet 00:80:C8:xx:xx:xx;
  fixed-address 10.10.10.2;
}

host omap3evm_rev_d {
  hardware ethernet 00:50:c2:xx:xx:xx;
  fixed-address 10.10.10.3;
  filename "evm/uImage"; <- this string actual for boot with tftp 
}

}}}
 * Configure TFTP-server
/etc/xinet.d/tftpd:
{{{
service tftp
{
protocol        = udp
port            = 69
socket_type     = dgram
wait            = yes
user            = nobody
server          = /usr/sbin/in.tftpd
server_args     = /tftpboot
disable         = no
}
}}}
== Checkout sources ==
{{{
$ mkdir rowboat-android
$ cd rowboat-android
$ repo init -u git://gitorious.org/rowboat/manifest.git
$ repo sync
}}}

== Build rootfs ==
The next step is Android file system build. 
To build file system you need to specify for which board you want to build. Use variable `TARGET_PRODUCT` for this:
 * beagleboard
 * omap3evm
Also if you need some unit tests for further use `TARGET_BUILD_VARIANT=tests`.
If you are using multicore CPU in your host it’s possible to use more than one core for building Android for this pass -j8 (or 16, it depends on cores/CPUs) parameter to `make` command.

In following listing we build Android for OMAP3EVM board with unit test packages and use 16 threads to speed up build process:
{{{
$ make TARGET_PRODUCT=omap3evm TARGET_BUILD_VARIANT=tests -j8
}}}
After build process finished you'll need rootfs for this do following:
{{{ 
$ cd out/target/product/omap3evm
$ mkdir android_rootfs
$ cp -r root/* android_rootfs
$ cp -r system android_rootfs
$ sudo ../../../../build/tools/mktarball.sh ../../../host/linux-x86/bin/fs_get_stats android_rootfs . rootfs rootfs.tar.bz2
}}}
== Build kernel ==
The next step is building of Linux kernel for your board. In following listing the first step is settings up prebuilt toolchains, the third step is kernel configuring and here you need to use right config file for your board
 * omap3_evm_android_defconfig is for OMAP3EVM
 * omap3_beagle_android_defconfig is for Beagleboard 
The fourth step in listing is kernel build command, here we tell `make` utility what build is for `ARM` architecture using cross-toolchains for ARM, the build target is `uImage` and it’s multithread build (-j8):
{{{
$ cd <sources top>
$ export PATH=${PWD}/prebuilt/linux-x86/toolchain/arm-/eabi-4.4.0/bin:$PATH
$ cd kernel/
$ make ARCH=arm omap3_evm_android_defconfig
$ make ARCH=arm CROSS_COMPILE=arm-eabi- uImage -j8
$ cd ..
}}}
== Prepare SD card ==
To boot Android from SD/MMC card you must have it partitioned like following:
{{{
$ sudo fdisk /dev/<your sdcard,for example sdd>
Command (m for help): p

Disk /dev/sdd: 1977 MB, 1977614336 bytes
64 heads, 63 sectors/track, 957 cylinders
Units = cylinders of 4032 * 512 = 2064384 bytes
Disk identifier: 0x00000000

Device Boot      Start         End      Blocks   Id  System
/dev/sdd1            1          30       60448+   b  W95 FAT32
/dev/sdd2           31         957     1868832   83  Linux
}}}
Format the partitions for use the commands:
{{{
$ sudo mkfs.msdos /dev/sdd1
$ sudo mkfs.ext3 /dev/sdd2
}}}
Use the kernel image (e.g. uImage) from the build process above and place in on the W95 FAT32 partition:
{{{
$ sudo mkdir -p /mnt/fat32
$ sudo mount /dev/sdd1 /mnt/fat32
$ sudo cp kernel/arch/arm/boot/uImage /mnt/fat32
}}}
Unpack the Android tarball above onto the EXT3 partition:
{{{
$ sudo mkdir -p /mnt/ext3
$ sudo mount /dev/sdd2 /mnt/ext3
$ sudo tar jxfv out/target/product/<board>/rootfs.tar.bz2 --numeric-owner -C /mnt/ext3
}}}
And the final step:
{{{
$ sync
$ sudo umount /mnt/fat32; sudo umount /mnt/etx3
}}}

== Configure target board ==
There is one important requirement:
 * for [OMAP3EVM] U-Boot should be 2008.10 (Jun 16 2009-18:54:50)
 * for BeagleBoard U-Boot should be 2009.08 
=== Beagleboard ===
{{{
Beagleboard# setenv bootcmd 'mmc init; fatload mmc 0 84000000 uImage; bootm 84000000'
Beagleboard# setenv bootargs 'mem=128M androidboot.console=ttyS2 console=tty0 console=ttyS2,115200n8 root=/dev/mmcblk0p2 rw init=/init rootwait omapfb.video_mode=640x480MR-16@60'
Beagleboard# saveenv
Beagleboard# reset 
}}}
=== OMAP3_EVM ===
This is example. You should use your network parameters. 
{{{
OMAP3_EVM# setenv bootcmd tftp; bootm
OMAP3_EVM# setenv baudrate 115200
OMAP3_EVM# setenv bootargs mem=128M console=tty0 console=ttyS0,115200n8 androidboot.console=ttyS0 root=/dev/mmcblk0p2 rw init=/init rootdelay=5 
OMAP3_EVM# setenv ipaddr=10.10.10.3
OMAP3_EVM# setenv netmask=255.255.255.0
OMAP3_EVM# setenv serverip=10.10.10.1
OMAP3_EVM# setenv ethaddr=00:50:c2:XX:XX:XX
OMAP3_EVM# setenv bootfile=evm/uImage <-- full path on host is /tftpboot/evm/uImage
OMAP3_EVM# save
}}}
If you need external display enabled use following `bootargs`:
{{{
OMAP3_EVM# setenv bootargs mem=128M console=tty0 console=ttyS0,115200n8 androidboot.console=ttyS0 root=/dev/mmcblk0p2 rw init=/init rootdelay=5 omap-dss.def_disp=dvi omapfb.video_mode=720x480MR-16@60
}}}
Remember what if you are using external display on-board display is off, but touch surface still functional.
== First start ==
Start the target board and wait until Android installing all prebuilt applications (default and custom) and configuring default settings. There is no indication for this time so you just need to wait until Android fully launched. After this you need to reboot the board. 