#summary This page will discuss using the pre-built Rowboat Android images to try out Rowboat quickly.

= Introduction =

This page will discuss using the pre-built Rowboat Android images to try out Rowboat quickly without having to download and build the source (hopefully within minutes!). There are a couple of ways to do this, primarily an SD card boot or a network TFTP/NFS based boot. 

For now this article is focusing on booting the Mistral EVM through NFS. Additional sections can be added later for SD card booting and Beagle. 

= Booting Rowboat via TFTP/NFS on the Mistral EVM =

This is the boot of choice particularly if you already have a Mistral EVM up and running with NFS after following the [http://wiki.davincidsp.com/index.php/OMAP35x_DVEVM_Getting_Started_Guide OMAP3 EVM Getting Started Guide]. Before using this method, please note that this method assumes you are using a Linux host machine to run a TFTP and NFS servers, most any typical PC distribution will do, though this was tested against Ubuntu.

  * First you can download the [http://code.google.com/p/rowboat/downloads/list pre-built images here]. There are several available files here for download, if you are unsure what to pick just choose the latest 'daily build' for your platform (for example omap3evm-donut-20xx-xx-xx.tar.bz2). 
  * Now you can move the file to your preferred working directory and un-tar the file to take a look at the contents. This should give you two files, uImage which contains your OS kernel and another tar file which contains the file system (for example omap3evm-donut-rootfs-20xx-xx-xx.tar.bz2). 
{{{host % tar -jxvf omap3evm-donut-20xx-xx-xx.tar.bz2}}}
  * If you have already been working with your OMAP3 EVM you probably already have some of the background work for setting up a TFTP and NFS server on your host done, however if you have not you can read about setting up a [http://wiki.davincidsp.com/index.php/Setting_Up_a_TFTP_Server#Using_Ubuntu TFTP server here] and a [ NFS server here]. With the TFTP and NFS servers up and ready to go we simply need to put the Rowboat files into place and configure the board for NFS.
  * For the kernel image file uImage one must copy the file to the TFTP server's tftpboot directory, in the case of Ubuntu this is generally /var/lib/tftpboot. Note that by default this directory is protected so the sudo command will be used to authorize the copy. 
{{{host % sudo cp uImage /var/lib/tftpboot}}}
  * For the filesystem we can extract this anywhere and than configure the NFS server to serve it, so if it is already in a directory you wish to work from you can just extract it here. Note we are using the sudo command for full privelages to guarantee the file system is extracted properly. 
{{{host % sudo tar -jxvf omap3evm-donut-rootfs-20xx-xx-xx.tar.bz2}}}
  * Now that we have the file system extracted we need to configure the NFS server to serve it, so we will edit the /etc/exports file to add a line like {{{/your/particular/host/path/omap3evm-donut-rootfs-20xx-xx-xx *(rw,no_root_squash,no_all_squash,sync)}}} and save the file. You can use any editor to do this that you like, but if you are new to Linux than gedit is easy, note that once again we are using sudo to allow us to edit this file.
{{{host % sudo gedit /etc/exports}}}
  * Now that the NFS is configured you need to restart the service so it will add in the new directory, so a command like below should do it. 
{{{host % sudo service nfs-kernel-server restart}}}
  * With this the host Linux PC should be sharing both the uImage kernel and the filesystem, so we need to configure the U-Boot environment variables. 
{{{EVM % setenv bootcmd 'dhcp; bootm'}}}

{{{EVM % setenv bootargs 'mem=128M console=ttyS0,115200n8 androidboot.console=ttyS0 noinitrd ip=dhcp rw root=/dev/nfs nfsroot=xx.xx.xx.xx:/your/particular/host/path/omap3evm-donut-rootfs-20xx-xx-xx,nolock,proto=tcp init=/init rootwait'}}}

{{{EVM % setenv serverip xx.xx.xx.xx}}}

{{{EVM % setenv bootfile uImage}}}